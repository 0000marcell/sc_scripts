class Api::V1::<%= @model_p_c %>Controller < ApplicationController
  before_action :doorkeeper_authorize!
  before_action :set_api_v1_<%= @model_s %>, only: [:show, :edit, :update, :destroy]

  # GET /api/v1/<%= @model_p %>/1
  def show
		render json: @api_v1_<%= @model_s %>
  end

  # POST /api/v1/<%= @model_p %>
  def create
    @api_v1_<%= @model_s %> = 
      current_resource_owner.build_<%= @model_s %>(api_v1_<%= @model_s %>_params)
    if @api_v1_<%= @model_s %>.save 
			render json: @api_v1_<%= @model_s %>
    else
			render json: { <%= @model_s %>: { msg:  "<%= @model_s %> was not salved!" } }, status: 422
    end
  end

  # PATCH/PUT /api/v1/<%= @model_p %>/1
  def update
		@api_v1_<%= @model_s %> = current_resource_owner.<%= @model_s %>
    if @api_v1_<%= @model_s %>.update(api_v1_<%= @model_s %>_params)
			render json: @api_v1_<%= @model_s %>
		else
			render json: { <%= @model_s %>: { msg:  "<%= @model_s %> was not salved!" } }, status: 422
    end
  end

  # DELETE /api/v1/<%= @model_p %>/1
  def destroy
		current_resource_owner.<%= @model_s %>.destroy
		head:no_content
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_api_v1_<%= @model_s %>
      @api_v1_<%= @model_s %> = current_resource_owner.<%= @model_s %>
    end

    # Only allow a trusted parameter "white list" through.
    def api_v1_<%= @model_s %>_params
      # ... .permit(:name, :user_id)
      params.require(:data).require(:attributes).permit(:name, :relationships)
			params.require(:<%= @model_s %>).permit(#TODO)
    end
end
